K = [100   0 10; 
       0 100 11; 
       0   0  1 ]; % Arbitrary K matrix

[R,~] = qr(randn(3,3));
C = -R'*randn(3,1);

N = 10;
X = randn(N,3);
X_noise = zeros(size(X));
%for i=1:N
%     X(i,:) = sign(X(i,3))*X(i,:); % Positive depth
%     X_noise(i,:) = X(i,:) + 0.2*randn(1,3); % Noisy version
    % You could also add a stronger bias to see how it does
%end

%sigma = 0.0; % No noise for now - can add it later

x = K*R*(X' - repmat(C, [1 size(X,1)]));% + sigma*randn(2,1);
x = x ./ repmat(x(3, :), [3, 1]);
x = x(1:2,:)';

[C_est, R_est] = LinearPnP(X, x, K);
          
error_c = C_est - C
error_r = R_est - R